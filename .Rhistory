a<-read.csv("testdf.csv")
a
names(a)
names(a)[names(a)=="heart.attack"] <- "HA"
names(a)
a<-read.csv("testdf.csv")
a
names(a)
names(a)[names(a)=="heart.attack"] <- "HA"
names(a)[names(a)=="heart.failure"] <-"HF"
names(a)
a
a<-read.csv("testdf.csv")
a
names(a)
names(a)[names(a)=="heart.attack"] <- "HA"
names(a)[names(a)=="heart.failure"] <-"HF"
names(a)
b<-"CO"
c<-a[a$State==b,]
c
d<-min(c$HA)
d
e<-c[c$HA==d,]
e
length(e$HA) # if greater than 1, we have a tie
e$Name #a vector with names of hospitals
f<-sort(e$Name)
g<-as.character(f[1])
is.vector(g)
g
a<-read.csv("testdf.csv")
a
names(a)[names(a)=="heart.attack"] <- "HA"
names(a)[names(a)=="heart.failure"] <-"HF"
names(a)
b<-"CO"
c<-a[a$State==b,]
c
d<-min(c$HA)
d
e<-c[c$HA==d,]
e
length(e$HA) # if greater than 1, we have a tie
e$Name #a vector with names of hospitals
f<-sort(e$Name)
g<-as.character(f[1])
is.vector(g)
g
outcomefile<-read.csv("outcome-of-care-measures.csv")
names(outcomefile)
outcomefile<-read.csv("outcome-of-care-measures.csv")
names(outcomefile)
names(outcomefile) [names(outcomefile=="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]<-"HA"
names(outcomefile)
outcomefile<-read.csv("outcome-of-care-measures.csv")
names(outcomefile)
names(outcomefile) [names(outcomefile == "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]<-"HA"
names(outcomefile)
outcomefile<-read.csv("outcome-of-care-measures.csv")
names(outcomefile)
names(outcomefile) [names(outcomefile == "ZIP.Code")]<-"HA"
names(outcomefile)
a<-read.csv("testdf.csv")
a
names(a)[names(a)=="heart.attack"] <- "HA"
names(a)[names(a)=="heart.failure"] <-"HF"
names(a)
a
best<-function(state="CO",outcome="heart attack"){
outcomefile<-read.csv("outcome-of-care-measures.csv")
names(outcomefile)
names(outcomefile) [names(outcomefile == "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]<-"HA"
names(outcomefile)
outcomefile<-read.csv("outcome-of-care-measures.csv")
names(outcomefile)
names(outcomefile) [names(outcomefile == "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]<-"HA"
names(outcomefile)
outcomefile<-read.csv("outcome-of-care-measures.csv")
#names(outcomefile)
#names(outcomefile) [names(outcomefile == "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]<-"HA"
#names(outcomefile)
validoutcomes<-c("heart attack","heart failure","pneumonia")
validstate<-unique(outcomefile$State)
outcome<-"heart attack" #temp set of outcome while building code
state<-"CO" # temp set of state while building code
coloutcomes <-c(2,7,11,17,23) #these are col numbers for heart attack, heart failure, pneumonia
df1<-outcomefile[outcomefile$State==state,]
df1
df2<-df1[,coloutcomes]
df2
d<-min(outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
d
d<-outcome$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
df2
d<-df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
d
min(d)
is.numeric(d)
d<-as.numeric(d)
min(d)
d
df2
apply(df2[3:5],2,min)
d<-apply(df2[3:5],2,min)
d
is.vector(d)
attributes(d)
d[1]
d[2]
d<-apply(df2[3:5],2,min)
d
e<-d[1]
e
f<-df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack ==e,]
f
g<-f[1]
g
is.vector(g)
g<-as.character(f[1])
is.vector(g)
g
f<-df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack ==e,]
f
g<-f[1]
g
is.vector(g)
f[1]
g<-as.character(f[1])
g
g<-c(f[1])
g
is.vector(g)
g
attributes(g)
g<-as.character(g)
g
f<-df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack ==e,]
g<-c(f[1])
g
g<-f[1]
g
?a
?as
g<-as(vector)
g<-as(g,vector)
g<-c(f[1])
is.vector(g)
g
is.factor(g)
g
attributes(g)
h<-c("a","b","c")
attributes(g)
attributes(h)
h[1]
is.list)g
is.list(g)
is.list(h)
?unlist
unlist(g)
g
g
is.list(g)
h<-unlist(g)
h
is.list(h)
is.vector(d)
is.vector(h)
f<-df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack ==e,]
g<-c(f[1])
is.vector(g)
g
outcomefile<-read.csv("outcome-of-care-measures.csv")
#names(outcomefile)
#names(outcomefile) [names(outcomefile == "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]<-"HA"
#names(outcomefile)
validoutcomes<-c("heart attack","heart failure","pneumonia")
validstate<-unique(outcomefile$State)
outcome<-"heart attack" #temp set of outcome while building code
state<-"CO" # temp set of state while building code
coloutcomes <-c(2,7,11,17,23) #these are col numbers for heart attack, heart failure, pneumonia
df1<-outcomefile[outcomefile$State==state,] #new DF with subset of all rows for value of state
df2<-df1[,coloutcomes]
df2
attributes(df2)
is.list(df2)
is.vector(df2)
is.data.frame(df2)
d<-apply(df2[3:5],2,min)
d
is.list(d)
is.vector(d)
is.character(d)
is.numeric(d)
d[1]
e<-d[1]
e
f<-df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack ==e,]
f
is.list(f)
is.vector(f)
is.data.frame(f)
f[1]
is.character(f[1])
f$Hospital.Name
is.factor(f)
?c
g<-c(f[1])
g
is.vector(g)
is.list(g)
f<-df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack ==e,]
f
g<-c(f[1])
g
is.vector(g)
is.character(g)
f
g<-character(length=1)
g<-f[1]
g
is.vector(g)
g<-as.vector(g)
g
is.vector(g)
attributes(f)
f[1]
f[2]
f[3]
f
attributes(f)
f<-df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack ==e,]
f
attributes(f)
f[1,]
f[2,]
f[3,]
f[1]
f
attributes(f)
nrow(f)
?subset
outcomefile<-read.csv("outcome-of-care-measures.csv")
#names(outcomefile)
#names(outcomefile) [names(outcomefile == "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")]<-"HA"
#names(outcomefile)
validoutcomes<-c("heart attack","heart failure","pneumonia")
validstate<-unique(outcomefile$State)
outcome<-"heart attack" #temp set of outcome while building code
state<-"CO" # temp set of state while building code
coloutcomes <-c(2,7,11,17,23) #these are col numbers for heart attack, heart failure, pneumonia
df1<-outcomefile[outcomefile$State==state,] #new DF with subset of all rows for value of state
df2<-df1[,coloutcomes]
df2
d<-apply(df2[3:5],2,min)
d
e<-d[1]
e
f<-df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack ==e,]
f
g<-as.character(as.vector(f[1,]))
g
?read.csv
outcomefile<-read.csv("outcome-of-care-measures.csv",stringAsFactors=FALSE)
outcomefile<-read.table("outcome-of-care-measures.csv",stringAsFactors=FALSE)
outcomefile<-read.csv("outcome-of-care-measures.csv",stringsAsFactors=FALSE)
validoutcomes<-c("heart attack","heart failure","pneumonia")
validstate<-unique(outcomefile$State)
outcome<-"heart attack" #temp set of outcome while building code
state<-"CO" # temp set of state while building code
coloutcomes <-c(2,7,11,17,23) #these are col numbers for heart attack, heart failure, pneumonia
df1<-outcomefile[outcomefile$State==state,]
df2<-df1[,coloutcomes]
df2
d<-apply(df2[3:5],2,min)
e<-d[1]
e
f<-df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack ==e,]
f
g<-f[1]
g
g<-as.character(as.vector(f[1,]))
g
g[1]
f<-df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack ==e,]
f
g<-as.character(as.vector(f[1,]))
g
g[1]
source("best.R")
source("best.R")
best()
source('~/coursera/best.R')
best()
source('~/coursera/best.R')
source('~/coursera/best.R')
best()
source('~/coursera/best.R')
source('~/coursera/best.R')
best(AR)
best("AR")
best("TX")
source('~/coursera/best.R')
source('~/coursera/best.R')
source('~/coursera/best.R')
?stop
source('~/coursera/best.R')
best("NJ","fred")
source('~/coursera/best.R')
best("NJ","heart attack")
source('~/coursera/best.R')
best("NJ","heart attack")
source('~/coursera/best.R')
source('~/coursera/best.R')
best("NJ","heart attack")
best("NJ","heartattack")
best("NJ","heart failure")
best("NJ","pneumonia")
best("CA","pneumonia")
best("TX","hart attack")
best("TX","heart attack")
source('~/coursera/best.R')
best("TX","heart attack")
validstate
vsloop<-length(validstate)
vsloop
?for
?for
for (state in 1:vsloop) {
if (state != validstate) stop("invalid state")
}
for (state in 1:vsloop) {
if (state != validstate[vsloop]) stop("invalid state")
}
source('~/coursera/best.R')
best("TX","heart attack")
vsloop<-length(validstate)
vsloop
source('~/coursera/best.R')
best("TX","heart attack")
validstate
validstate[1]
state
state="AK"
state
validstate[1]
if (state!=validstate[1]) stop("invalid state")
if (state!=validstate[2]) stop("invalid state")
for (i in 1:vsloop) {
if (state != validstate[i]) stop("invalid state")
}
vsloop
source('~/coursera/best.R')
best("TX","heart attack")
source('~/coursera/best.R')
best("TX","heart attack")
vsloop
source('~/coursera/best.R')
best("TX","heart attack")
source('~/coursera/best.R')
best("TX","heart attack")
source('~/coursera/best.R')
source('~/coursera/best.R')
source('~/coursera/best.R')
best("TX","heart attack")
best("Th","heart attack")
source('~/coursera/best.R')
best("TX","heart attack")
best("Th","heart attack")
source('~/coursera/best.R')
best("TX","heart attack")
best("Th","heart attack")
source('~/coursera/best.R')
source('~/coursera/best.R')
source('~/coursera/best.R')
best("TX","heart attack")
best("Th","heart attack")
source('~/coursera/best.R')
best("TX","heart attack")
source('~/coursera/best.R')
best("TX","heart attack")
source('~/coursera/best.R')
best("TX","heart attack")
source('~/coursera/best.R')
best("TX","heart attack")
source('~/coursera/best.R')
best("TX","heart attack")
best("Th","heart attack")
best("ME","pneumonia")
best("MD","pneumonia")
best("AK","heart attack")
best("AL","heart attack")
best("AR","heart attack")
best("AK","heart attack")
source('~/coursera/best.R')
best("AK","heart attack")
source('~/coursera/best.R')
best("AK","heart attack")
source('~/coursera/best.R')
best("AK","heart attack")
source('~/coursera/best.R')
best("AK","heart attack")
source('~/coursera/best.R')
best("AK","heart attack")
source('~/coursera/best.R')
best("AK","heart attack")
best("AL","heart attack")
source('~/coursera/best.R')
source('~/coursera/best.R')
source('~/coursera/best.R')
source('~/coursera/best.R')
best("AL","heart attack")
best("AK","heart attack")
best("AK","heart failure")
best("AK","pneumonia")
best("AK","pneumoni")
best("A","pneumonia")
best("AR","pneumonia")
best("AK","heart attack")
source('~/coursera/best.R')
best("AK","heart attack")
best("AR","pneumonia")
source('~/coursera/best.R')
source('~/coursera/best.R')
best("AR","pneumonia")
best("AK","heart attack")
best("AK","heart failure")
source('~/coursera/best.R')
best("AK","heart failure")
source('~/coursera/best.R')
best("AK","heart failure")
best("AK","heart attack")
source('~/coursera/best.R')
setwd("C:/Users/Gene/ProgrammingAssignment2")
dir()
getwd()
dir()
source("makeVector.R")
source('~/coursera/makevector.R')
makevector()
makeVector()
makeVector()
makeVector()
getwd()
dir()
source('~/coursera/cachemean.R')
cachemean()
cachemean(makeVector)
makeVector()
source('~/coursera/power.R')
square<-power(2)
square(4)
?square
attributes(square)
as.list(enviroment(square))
square<-power(2)
square(3)
as.list(environment(square))
source('~/coursera/makevector.R')
makeVector()
makeVector(3)
makeVector(1:5)
a<-makeVector()
a
cachemean(a)
makeVector(1:10)
a<-makeVector(1:10)
a
x<-1:10
a<-makeVector(x)
cachemean(a)
cachemean(a)
cachemean(a)
x<-1:9
cachemean(a)
a<-makeVector(x)
cachemean(a)
a<-makeVector(1:4)
cachmean(a)
cachemean(a)
cachemean(a)
?numeric
set()
efc<-function() x
efc
a<-efc(1)
a<-efc
a
get()
makeVector()
a<-makeVector(1:5)
a
a$get
a$get()
a$set()
a$set(8)
a$get()
x<-makeVector(1,2,3)
x<-makeVector(c(1,2,3))
x
x$get
x$get()
cachmean(x)
cachemean(x)
cachemean(x)
x$set
x$set()
x$set(c(4,5,6))
x$get()
cachemean(x)
cachemean(x)
